"use client";

import * as React from "react";
import { getExplanation } from "@/app/actions";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Skeleton } from "../ui/skeleton";
import type { Claim } from "@/lib/types";

export function ExplanationDialog({
  children,
  claim,
}: {
  children: React.ReactNode;
  claim: Claim;
}) {
  const [isOpen, setIsOpen] = React.useState(false);
  const [isLoading, setIsLoading] = React.useState(false);
  const [error, setError] = React.useState<string | null>(null);
  const [explanation, setExplanation] = React.useState<Record<string, string> | null>(null);

  React.useEffect(() => {
    if (isOpen && !explanation) {
      setIsLoading(true);
      setError(null);
      getExplanation(claim)
        .then(setExplanation)
        .catch((e) => setError("Failed to generate explanation. Please try again."))
        .finally(() => setIsLoading(false));
    }
  }, [isOpen, explanation, claim]);

  return (
    <Dialog open={isOpen} onOpenChange={setIsOpen}>
      <DialogTrigger asChild>{children}</DialogTrigger>
      <DialogContent className="sm:max-w-xl">
        <DialogHeader>
          <DialogTitle className="font-headline text-2xl">
            AI Explanation
          </DialogTitle>
          <DialogDescription>
            Generated by the Explainer Agent based on verified information.
          </DialogDescription>
        </DialogHeader>
        <div className="py-4 space-y-4">
          <p className="border-l-4 border-primary pl-4 text-muted-foreground italic">
            "{claim.content}"
          </p>

          {isLoading && (
            <div className="space-y-3">
              <Skeleton className="h-8 w-1/2" />
              <Skeleton className="h-20 w-full" />
            </div>
          )}

          {error && <p className="text-destructive text-sm">{error}</p>}
          
          {explanation && (
            <Tabs defaultValue={Object.keys(explanation)[0] || 'en'}>
              <TabsList>
                {Object.keys(explanation).map(lang => (
                  <TabsTrigger key={lang} value={lang}>
                    {lang.toUpperCase()}
                  </TabsTrigger>
                ))}
              </TabsList>
              {Object.entries(explanation).map(([lang, summary]) => (
                <TabsContent key={lang} value={lang}>
                  <p className="text-sm leading-relaxed">{summary}</p>
                </TabsContent>
              ))}
            </Tabs>
          )}
        </div>
      </DialogContent>
    </Dialog>
  );
}
