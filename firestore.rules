/**
 * @fileoverview Firestore Security Rules for the Fact Checker application.
 *
 * Core Philosophy:
 * This ruleset prioritizes a secure, owner-only access model for user data and public readability for claims, with owner-only write access. Verification and community feedback are linked to claims, with authenticated users allowed to contribute.
 *
 * Data Structure:
 * - /claims/{claimId}: Publicly readable claims data with owner-restricted writes.
 * - /claims/{claimId}/verifications/{verificationId}: Verification attempts related to a claim, accessible to authenticated users.
 * - /claims/{claimId}/communityFeedback/{feedbackId}: Community feedback on claims, accessible to authenticated users.
 * - /users/{userId}: User profile data, only accessible to the user and potentially admins (currently unimplemented).
 *
 * Key Security Decisions:
 * - User listing is disabled for privacy.
 * - Public read access to claims is enabled to facilitate broad access to information.
 * - Write operations are restricted to authenticated users.
 * - All write operations must be validated against the existing data to prevent modification of non-existent documents.
 *
 * Denormalization for Authorization:
 * - Verification documents contain a denormalized 'claimId' field to allow direct association with claims.
 * - Community feedback documents contain denormalized 'userId' and 'claimId' fields for direct association.
 *
 * Structural Segregation:
 * - Private user data is stored under /users/{userId}, while public claim data is stored in the top-level /claims/{claimId} collection.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to claims and restricts write access to authenticated users who are the owners.
     * @path /claims/{claimId}
     * @allow (get, list): if true
     * @allow (create): if isSignedIn() && request.resource.data.id == request.auth.uid; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @allow (update, delete): if isSignedIn() && resource != null && resource.data.id == request.auth.uid; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @deny (create): if !isSignedIn()
     * @deny (update, delete): if !isSignedIn()
     * @principle Allows public read access to claims, but restricts write access to claim owners.
     */
    match /claims/{claimId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if isSignedIn() && resource != null; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if isSignedIn() && resource != null; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows authenticated users to create, read, update, and delete verifications for a specific claim.
     * @path /claims/{claimId}/verifications/{verificationId}
     * @allow (create): if isSignedIn()
     * @allow (get, list): if isSignedIn()
     * @allow (update, delete): if isSignedIn() && resource != null
     * @deny (create): if !isSignedIn()
     * @deny (get, list): if !isSignedIn()
     * @deny (update, delete): if !isSignedIn()
     * @principle Authenticated users can manage verifications for claims.
     */
    match /claims/{claimId}/verifications/{verificationId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Allows a user to read and write their own profile data.
     * @path /users/{userId}
     * @allow (create): if isOwner(userId)
     * @allow (get, list): if isOwner(userId)
     * @allow (update, delete): if isExistingOwner(userId)
     * @deny (create): if !isOwner(userId)
     * @deny (get, list): if !isOwner(userId)
     * @deny (update, delete): if !isExistingOwner(userId)
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.id == request.auth.uid;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows authenticated users to create, read, update, and delete community feedback for a specific claim.
     * @path /claims/{claimId}/communityFeedback/{feedbackId}
     * @allow (create): if isSignedIn()
     * @allow (get, list): if isSignedIn()
     * @allow (update, delete): if isSignedIn() && resource != null
     * @deny (create): if !isSignedIn()
     * @deny (get, list): if !isSignedIn()
     * @deny (update, delete): if !isSignedIn()
     * @principle Authenticated users can manage community feedback for claims.
     */
    match /claims/{claimId}/communityFeedback/{feedbackId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}